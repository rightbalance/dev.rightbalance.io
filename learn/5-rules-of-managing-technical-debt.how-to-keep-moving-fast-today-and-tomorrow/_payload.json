[{"data":1,"prerenderedAt":237},["Reactive",2],{"learn":3},{"_path":4,"_dir":5,"_draft":6,"_partial":6,"_locale":7,"title":8,"description":9,"draft":6,"tags":10,"related_content":12,"short_title":13,"header_one":13,"header_two":14,"header_three":7,"cta_header":15,"cta_button":7,"cta_href":7,"icon":16,"icons":17,"image_url":7,"body":18,"_type":232,"_id":233,"_source":234,"_file":235,"_extension":236},"/learn/5-rules-of-managing-technical-debt.how-to-keep-moving-fast-today-and-tomorrow","learn",false,"","5 Rules of Managing Technical Debt: How to Keep Moving Fast Today and Tomorrow","In a technology organization, terms like technical debt, refactoring, or a hack are quite common to use. Knowing what technical debt is helps you work productively with software engineers. This post explains what technical debt is and how to manage it efficiently.",[11],"management",[],"Technical debt","5 rules to manage it","Need some help working with legacy applications?","credit-card-multiple-outline",[],{"type":19,"children":20,"toc":218},"root",[21,41,48,53,58,67,73,78,84,91,105,111,124,130,135,141,146,152,157,163,168,205],{"type":22,"tag":23,"props":24,"children":25},"element","p",{},[26,29,39],{"type":27,"value":28},"text","In a technology organization, terms like ",{"type":22,"tag":30,"props":31,"children":36},"a",{"href":32,"rel":33,"title":35},"https://www.agilealliance.org/project-management-and-technical-debt/",[34],"nofollow","Technical debt explanation",[37],{"type":27,"value":38},"technical debt",{"type":27,"value":40},", refactoring, or a hack are quite common to use. Knowing what technical debt is helps you work productively with software engineers. This post explains what technical debt is and how to manage it efficiently.",{"type":22,"tag":42,"props":43,"children":45},"h2",{"id":44},"what-is-technical-debt",[46],{"type":27,"value":47},"What is Technical Debt",{"type":22,"tag":23,"props":49,"children":50},{},[51],{"type":27,"value":52},"Technical debt is similar to credit card debt. You can spend some extra money now with a credit card. If you won’t pay it back shortly, you’ll be charged interest. If you don’t pay it off for a long time, the amount you owe increases drastically. This decreases your credit score which is hard to recover from.",{"type":22,"tag":23,"props":54,"children":55},{},[56],{"type":27,"value":57},"Taking on technical debt in software product development is very similar to it. In order to accomplish a certain feature faster in the short term, a developer can apply a hack. If the hack is not replaced with a well-made out solution, the code around it decays over time. In addition to it, the software is built on top of other software. We all use libraries and operating systems. Technologies change and the system needs maintenance updates as time goes by, even if there are no new features being developed. If maintenance updates are not addressed, it also increases your technical debt.",{"type":22,"tag":23,"props":59,"children":60},{},[61],{"type":22,"tag":62,"props":63,"children":66},"img",{"alt":64,"src":65},"Credit Card Debt","https://images.rightbalance.io/uploads/credit_cards.jpeg",[],{"type":22,"tag":42,"props":68,"children":70},{"id":69},"why-taking-on-more-technical-debt-slows-you-down",[71],{"type":27,"value":72},"Why Taking on More Technical Debt Slows You Down",{"type":22,"tag":23,"props":74,"children":75},{},[76],{"type":27,"value":77},"As you apply more hacks, your future development gets slower, you have more bugs in the product, and you get closer to the point when you need to start over. I’ve seen several companies in the past abandoning and rewriting their entire application from scratch since they were not able to make meaningful progress anymore.",{"type":22,"tag":42,"props":79,"children":81},{"id":80},"how-to-manage-technical-debt",[82],{"type":27,"value":83},"How to Manage Technical Debt",{"type":22,"tag":85,"props":86,"children":88},"h3",{"id":87},"get-on-the-same-page-with-engineers-and-stakeholders",[89],{"type":27,"value":90},"Get on the same page with engineers and stakeholders",{"type":22,"tag":23,"props":92,"children":93},{},[94,96,103],{"type":27,"value":95},"It’s crucially important for everyone on your engineering team and for stakeholders to understand the implications of endlessly taking on technical debt. Set up and maintain high code standards and ",{"type":22,"tag":30,"props":97,"children":100},{"href":98,"title":99},"/solutions/automated-tests-get-dividends-with-every-test-run","Automated testing solution",[101],{"type":27,"value":102},"high test coverage",{"type":27,"value":104}," on your engineering team. Make sure that stakeholders understand the technical debt concept and how it affects the speed and quality of the product. Aligning everyone’s expectations goes a long way.",{"type":22,"tag":85,"props":106,"children":108},{"id":107},"pay-it-off-right-after-you-introduced-it",[109],{"type":27,"value":110},"Pay it off right after you introduced it",{"type":22,"tag":23,"props":112,"children":113},{},[114,116,122],{"type":27,"value":115},"Every system has technical debt. Sometimes we need to focus on short-term goals. In this case, it's ok to introduce technical debt ",{"type":22,"tag":117,"props":118,"children":119},"em",{},[120],{"type":27,"value":121},"if and only if",{"type":27,"value":123}," you can pay it off right after you introduced it. The companies that ignore this important fact and continue to what seems like “moving quickly” will eventually slow down to a halt.",{"type":22,"tag":85,"props":125,"children":127},{"id":126},"revisit-your-architecture-regularly",[128],{"type":27,"value":129},"Revisit your architecture regularly",{"type":22,"tag":23,"props":131,"children":132},{},[133],{"type":27,"value":134},"What worked several months ago will not necessarily work now. Especially in startups where businesses grow and change fast, it’s important to revisit decisions made in the past. Take your time to refactor (or better yet, delete) code that no longer makes sense in order to accomplish the needs of today. Bring it up with your team as a part of your retrospectives and make action items to make sure it gets done.",{"type":22,"tag":85,"props":136,"children":138},{"id":137},"pay-off-big-debt-incrementally",[139],{"type":27,"value":140},"Pay off big debt incrementally",{"type":22,"tag":23,"props":142,"children":143},{},[144],{"type":27,"value":145},"When dealing with legacy systems, it may be too big of a task for one engineer to refactor it. In this case, make a plan on how you want it to look and change it one piece at a time. It’s important to maintain the vision of what you want this legacy system to be at the end.",{"type":22,"tag":85,"props":147,"children":149},{"id":148},"leave-the-codebase-in-a-better-place-than-when-you-started",[150],{"type":27,"value":151},"Leave the codebase in a better place than when you started",{"type":22,"tag":23,"props":153,"children":154},{},[155],{"type":27,"value":156},"All that matters is if everyone makes incremental progress towards making the codebase better. It’s impractical to stop feature development to get rid of all technical debt. Maintaining the right balance between feature delivery and paying off technical debt is key.",{"type":22,"tag":42,"props":158,"children":160},{"id":159},"conclusion",[161],{"type":27,"value":162},"Conclusion",{"type":22,"tag":23,"props":164,"children":165},{},[166],{"type":27,"value":167},"Every system out there has technical debt. Managing it effectively is a skill that can be learned. Technical debt is a risk. It's best to avoid risk and sometimes you have to take it. As long as the team is disciplined about paying it off, it's ok. At the end of the day, we all want to ship quality product, and managing technical debt is a part of it.",{"type":22,"tag":23,"props":169,"children":170},{},[171,176,178,188,189,194,195],{"type":22,"tag":117,"props":172,"children":173},{},[174],{"type":27,"value":175},"Photos are provided by",{"type":27,"value":177}," ",{"type":22,"tag":30,"props":179,"children":182},{"href":180,"rel":181},"https://www.flickr.com/photos/p_valdivieso/",[34],[183],{"type":22,"tag":117,"props":184,"children":185},{},[186],{"type":27,"value":187},"p_valdivieso",{"type":27,"value":177},{"type":22,"tag":117,"props":190,"children":191},{},[192],{"type":27,"value":193},"and",{"type":27,"value":177},{"type":22,"tag":30,"props":196,"children":199},{"href":197,"rel":198},"https://www.flickr.com/photos/smemon",[34],[200],{"type":22,"tag":117,"props":201,"children":202},{},[203],{"type":27,"value":204},"smemon",{"type":22,"tag":23,"props":206,"children":207},{},[208,210],{"type":27,"value":209},"Originally posted on ",{"type":22,"tag":30,"props":211,"children":215},{"href":212,"rel":213,"title":214},"https://alextamoykin.com/5-rules-of-managing-technical-debt-how-to-keep-moving-fast-today-and-tomorrow",[34],"alextamoykin.com backlink",[216],{"type":27,"value":217},"alextamoykin.com",{"title":7,"searchDepth":219,"depth":219,"links":220},2,[221,222,223,231],{"id":44,"depth":219,"text":47},{"id":69,"depth":219,"text":72},{"id":80,"depth":219,"text":83,"children":224},[225,227,228,229,230],{"id":87,"depth":226,"text":90},3,{"id":107,"depth":226,"text":110},{"id":126,"depth":226,"text":129},{"id":137,"depth":226,"text":140},{"id":148,"depth":226,"text":151},{"id":159,"depth":219,"text":162},"markdown","content:learn:5-rules-of-managing-technical-debt.how-to-keep-moving-fast-today-and-tomorrow.md","content","learn/5-rules-of-managing-technical-debt.how-to-keep-moving-fast-today-and-tomorrow.md","md",1707099640548]