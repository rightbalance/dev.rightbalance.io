[{"data":1,"prerenderedAt":329},["Reactive",2],{"learn":3},{"_path":4,"_dir":5,"_draft":6,"_partial":6,"_locale":7,"title":8,"description":7,"draft":6,"tags":9,"related_content":13,"short_title":14,"header_one":15,"header_two":16,"header_three":7,"cta_header":17,"cta_button":7,"cta_href":7,"icon":18,"icons":19,"image_url":7,"body":20,"_type":324,"_id":325,"_source":326,"_file":327,"_extension":328},"/learn/build-for-scale-build-to-last-10-steps-to-build-a-long-lasting-product","learn",false,"","Build For Scale, Build to Last: 10 Steps to Build a Long Lasting Product",[10,11,12],"management","career","product",[],"Build For Scale, Build to Last","Build For Scale","Build to Last","Want to build something impactful?","trending-up",[],{"type":21,"children":22,"toc":309},"root",[23,32,38,71,76,82,96,102,107,113,118,124,129,135,140,146,172,195,201,242,248,253,259,282,288,293,299,304],{"type":24,"tag":25,"props":26,"children":28},"element","h2",{"id":27},"building-things-right-makes-everything-else-easier",[29],{"type":30,"value":31},"text","Building things right makes everything else easier",{"type":24,"tag":33,"props":34,"children":35},"p",{},[36],{"type":30,"value":37},"It's very tempting to build something really quick, ship it out there, and start growing quickly. Sacrificing some quality for speed may make sense while building a prototype at the idea validation phase. That said, once the idea is validated, the product needs to be properly architected for scale. The reason behind it is that you need to set up your product architecture for future growth. If your product is not built for scale in mind, and you try to scale it, your technology will eventually stop supporting the increased traffic. As a consequence, your code will be convoluted to be able to make future changes rapidly, the team morale will go down which can lead to losing your core team members. Time and time again we’ve seen companies not architecting things properly at the beginning. Then needing to hire more engineers later to support an unscalable system. Long story short, if you build your product right in the beginning, scaling it won’t be a problem. Your cloud infrastructure bill will be low and you won’t need that many engineers to support it and grow it.",{"type":24,"tag":33,"props":39,"children":40},{},[41,43,52,54,61,63,69],{"type":30,"value":42},"A classic example of not building for scale is starting with a ",{"type":24,"tag":44,"props":45,"children":50},"a",{"href":46,"rel":47,"title":49},"https://en.wikipedia.org/wiki/Monolithic_system",[48],"nofollow","monolithic architecture",[51],{"type":30,"value":49},{"type":30,"value":53},", putting all your code in a single application, then taking it too far to later realize that you need to rebuild the entire product. A better way is to start with the ",{"type":24,"tag":44,"props":55,"children":59},{"href":56,"rel":57,"title":58},"https://en.wikipedia.org/wiki/Microservices#:~:text=",[48],"microservices architecture",[60],{"type":30,"value":58},{"type":30,"value":62}," from the beginning (or at least pivot into microservices as the application gets large). This way you develop your software in multiple modules with a clear set of responsibilities. This approach is a lot more manageable and more scalable because you can scale each module independently. Here is a link to the ",{"type":24,"tag":44,"props":64,"children":67},{"href":65,"title":66},"/solutions/serverless-software-development-focus-on-features-instead-of-the-infrastructure","Serverless Microservices solution",[68],{"type":30,"value":66},{"type":30,"value":70}," going deeper on the topic.",{"type":24,"tag":33,"props":72,"children":73},{},[74],{"type":30,"value":75},"In the meantime, let’s go over the 10 ways to build a long-lasting product:",{"type":24,"tag":25,"props":77,"children":79},{"id":78},"_1-achieve-company-alignment",[80],{"type":30,"value":81},"1. Achieve Company Alignment",{"type":24,"tag":33,"props":83,"children":84},{},[85,87,94],{"type":30,"value":86},"It’s important to have a buy-in from the whole organization that rushing through and shipping low-quality product is counterproductive. Each shortcut we take will add on to our technical debt which needs to be paid off. On the other hand, there should always be urgency around shipping because it’s easy to fall into a trap of building a perfect product for a long time. The best code is worthless if it’s not shipped and running in production without any issues. It’s all about finding ",{"type":24,"tag":44,"props":88,"children":91},{"href":89,"rel":90},"https://rightbalance.io",[48],[92],{"type":30,"value":93},"the right balance",{"type":30,"value":95}," (no pun intended).",{"type":24,"tag":25,"props":97,"children":99},{"id":98},"_2-minimize-system-downtime",[100],{"type":30,"value":101},"2. Minimize System Downtime",{"type":24,"tag":33,"props":103,"children":104},{},[105],{"type":30,"value":106},"As software engineers, we should strive to build computer systems that are always up and serving our customers without our manual intervention. Why? Because it’s in the nature of our profession and in the core strength of the whole of humankind to build systems that work without requiring our presence. While developing a software component, engineers should always be focused on developing it in a way so it can deliver customer value and recover gracefully from an error situation. Which involves performing validation on the incoming data, making sure there are self-healing automated systems in place. And if the error happens, it’s clear what to do, appropriate people are notified for taking care of the issue.",{"type":24,"tag":25,"props":108,"children":110},{"id":109},"_3-minimize-maintenance",[111],{"type":30,"value":112},"3. Minimize Maintenance",{"type":24,"tag":33,"props":114,"children":115},{},[116],{"type":30,"value":117},"Doing things right is hard and it takes time. However, if you commit to doing things right, then eventually, doing things right becomes second nature. In addition to it, doing things right becomes easier the more you do it. So, if there is a question when you should start doing things right, the answer is now. It’s very easy to fall into a trap of introducing a couple of manual steps in your deployment or some SQL you need to run sometimes to clean up your data. The goal is to reduce the number of manual steps engineers need to do instead of adding more manual steps. Each maintenance step you add may not seem like a lot. It’s a slippery slope that turns software engineers into maintenance engineers. We’ve seen the entire engineering team not producing any more new code and just doing some manual tasks to keep the product running. Unfortunately, it’s quite common, especially in large organizations. All high maintenance systems start with just one manual step you leave behind.",{"type":24,"tag":25,"props":119,"children":121},{"id":120},"_4-automate-manual-work",[122],{"type":30,"value":123},"4. Automate Manual Work",{"type":24,"tag":33,"props":125,"children":126},{},[127],{"type":30,"value":128},"The best use of a software developer’s time is to create systems that deliver value. Coding is hard and there are only so many hours in a day. So it’s best to apply our coding skills towards automating some manual work we otherwise need to do. Another issue with manual work is that it requires a context switch. Because coding requires you to deal with a lot of variables, it takes some time to get into the context (what some people call getting into the zone). Switching to a manual task, like updating some records in the database, requires you to switch your context. Then once the task is done, coming back to coding will take some time again because you need to get into another, more complicated context of coding. If you have several manual tasks spread throughout the day, you’ll find yourself not producing any meaningful code by the end of the day. That said, doing some manual work once in a while is unavoidable. The solution is to strive to minimize it and automate it away instead of adding to it.",{"type":24,"tag":25,"props":130,"children":132},{"id":131},"_5-keep-your-hand-on-the-pulse-with-alerting-and-monitoring",[133],{"type":30,"value":134},"5. Keep your hand on the pulse with Alerting and Monitoring",{"type":24,"tag":33,"props":136,"children":137},{},[138],{"type":30,"value":139},"Each microservice or a client application has to have some alerting and monitoring component before going live. Your component may work on your local machine or even in the hands of a QA person. Once it goes live, the only way to know if it works as expected after you deploy your changes is to have some comprehensive alerting and monitoring. If an error happens, it should be sent to email/text/slack/PagerDuty or anywhere it can be seen and acted upon. The goal of it is to not create more distractions or more manual work, but rather to find if we missed something that should be added as a feature or an improvement to the product. As long as you keep on improving and refactoring your system, you’ll one day come to a place where things just work, always.",{"type":24,"tag":25,"props":141,"children":143},{"id":142},"_6-measure-and-analyze",[144],{"type":30,"value":145},"6. Measure and Analyze",{"type":24,"tag":147,"props":148,"children":149},"blockquote",{},[150,159],{"type":24,"tag":33,"props":151,"children":152},{},[153],{"type":24,"tag":154,"props":155,"children":156},"em",{},[157],{"type":30,"value":158},"If you can’t measure it, you can’t improve it.",{"type":24,"tag":160,"props":161,"children":162},"ul",{},[163],{"type":24,"tag":164,"props":165,"children":166},"li",{},[167],{"type":24,"tag":154,"props":168,"children":169},{},[170],{"type":30,"value":171},"Peter Drucker",{"type":24,"tag":33,"props":173,"children":174},{},[175,177,184,186,193],{"type":30,"value":176},"Trusting your gut is important, that said, business decisions need to be made based on some real data. Our recommendation is to target a specific set of metrics for the product, collect the data, and monitor the metrics closely with some regular analysis. Some of the metrics can be collected from the client application like button clicks, page views, etc. And some need to be collected from the back end. The best solution is to have a proper ",{"type":24,"tag":44,"props":178,"children":181},{"href":179,"rel":180},"https://en.wikipedia.org/wiki/Data_warehouse",[48],[182],{"type":30,"value":183},"data warehouse",{"type":30,"value":185}," or ",{"type":24,"tag":44,"props":187,"children":190},{"href":188,"rel":189},"https://en.wikipedia.org/wiki/Data_lake",[48],[191],{"type":30,"value":192},"data lake",{"type":30,"value":194}," where all sources of data come together in a structured format you can query. This allows you to connect the dots and build conversion funnels based on the rich set of data.",{"type":24,"tag":25,"props":196,"children":198},{"id":197},"_7-document-instead-of-keeping-things-in-your-head",[199],{"type":30,"value":200},"7. Document instead of Keeping Things in Your Head",{"type":24,"tag":33,"props":202,"children":203},{},[204,206,213,215,222,224,231,233,240],{"type":30,"value":205},"Having the system knowledge only in someone's head is risky. It decreases your ",{"type":24,"tag":44,"props":207,"children":210},{"href":208,"rel":209},"https://en.wikipedia.org/wiki/Bus_factor",[48],[211],{"type":30,"value":212},"bus factor",{"type":30,"value":214},". If the knowledge is spread out then having to talk to multiple people to understand how the system works is inefficient. It also slows down your team velocity in the long run. The solution to this problem is simple. You choose your documentation tool (",{"type":24,"tag":44,"props":216,"children":219},{"href":217,"rel":218},"http://quip.com",[48],[220],{"type":30,"value":221},"Quip",{"type":30,"value":223},", ",{"type":24,"tag":44,"props":225,"children":228},{"href":226,"rel":227},"https://www.atlassian.com/software/confluence",[48],[229],{"type":30,"value":230},"Confluence",{"type":30,"value":232},", or even ",{"type":24,"tag":44,"props":234,"children":237},{"href":235,"rel":236},"https://docs.google.com/",[48],[238],{"type":30,"value":239},"Google Docs",{"type":30,"value":241}," work just fine) and you make it a good practice to document how each part of the system works. Once the modification to the system is made, the documentation needs to be updated too. This way, there is a consistent process for ramping up new developers on any part of your system. New developers just read the existing docs and make the updates as necessary.",{"type":24,"tag":25,"props":243,"children":245},{"id":244},"_8-minimize-management-overhead",[246],{"type":30,"value":247},"8. Minimize Management Overhead",{"type":24,"tag":33,"props":249,"children":250},{},[251],{"type":30,"value":252},"It’s amazing to see how a lot of open source projects streamline the process for reporting issues, implementing the fixes, and rolling out new releases. The same principles should apply within your organization too. The key to minimizing management overhead is to have a solid feature delivery process (preferably Agile) that everyone believes and follows. Things like introducing more changes mid-sprint create additional scope-related conversations, change of context, sometimes misaligned expectations. It takes energy to address them, and this energy could be spent on delivering the functionality by sticking to the plan.",{"type":24,"tag":25,"props":254,"children":256},{"id":255},"_9-maximize-maker-time",[257],{"type":30,"value":258},"9. Maximize Maker Time",{"type":24,"tag":33,"props":260,"children":261},{},[262,264,271,273,280],{"type":30,"value":263},"Maker’s Schedule, Manager’s Schedule article from ",{"type":24,"tag":44,"props":265,"children":268},{"href":266,"rel":267},"https://en.wikipedia.org/wiki/Paul_Graham_(programmer)",[48],[269],{"type":30,"value":270},"Paul Graham",{"type":30,"value":272},", one of the founders of ",{"type":24,"tag":44,"props":274,"children":277},{"href":275,"rel":276},"https://www.ycombinator.com/",[48],[278],{"type":30,"value":279},"YCombinator",{"type":30,"value":281}," describes the difference between how the maker operates and the manager operates. It’s important to realize that your product is built by makers. Software engineering is hard and it consumes a lot of brain energy. To make a great product, it takes some time to get into the zone. And if a developer gets constantly dragged into some side conversations and meetings, getting into the zone is almost impossible. Maximizing maker time, removing the meetings and distractions from your developers is key to having a high velocity on your team.",{"type":24,"tag":25,"props":283,"children":285},{"id":284},"_10-have-fun",[286],{"type":30,"value":287},"10. Have Fun!",{"type":24,"tag":33,"props":289,"children":290},{},[291],{"type":30,"value":292},"Software engineering is a creative process. Any creative process requires having fun, having high energy fueled by enjoying what you’re doing. Just cranking through some boring work isn’t going to get your team very far in the long run. Doing things so it’s exciting, using the latest technologies, solving problems in new and creative ways is what makes the products great. If things get boring, think about how you can spice things up using the new tech, features, or product opportunities. You’ll get a highly motivated team having a lot of fun!",{"type":24,"tag":25,"props":294,"children":296},{"id":295},"conclusion",[297],{"type":30,"value":298},"Conclusion",{"type":24,"tag":33,"props":300,"children":301},{},[302],{"type":30,"value":303},"There is no time to waste building your product. Everything you build today can last decades and affect millions of people. When the basics are done right, scaling your product is easy. It lowers your maintenance costs so you can focus on future growth and development. Doing so requires some effort upfront which is totally worth it.",{"type":24,"tag":33,"props":305,"children":306},{},[307],{"type":30,"value":308},"So what are you waiting for? Go ahead and build something that scales and lasts! 🙌",{"title":7,"searchDepth":310,"depth":310,"links":311},2,[312,313,314,315,316,317,318,319,320,321,322,323],{"id":27,"depth":310,"text":31},{"id":78,"depth":310,"text":81},{"id":98,"depth":310,"text":101},{"id":109,"depth":310,"text":112},{"id":120,"depth":310,"text":123},{"id":131,"depth":310,"text":134},{"id":142,"depth":310,"text":145},{"id":197,"depth":310,"text":200},{"id":244,"depth":310,"text":247},{"id":255,"depth":310,"text":258},{"id":284,"depth":310,"text":287},{"id":295,"depth":310,"text":298},"markdown","content:learn:build-for-scale-build-to-last-10-steps-to-build-a-long-lasting-product.md","content","learn/build-for-scale-build-to-last-10-steps-to-build-a-long-lasting-product.md","md",1707099640555]